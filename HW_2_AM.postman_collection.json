{
	"info": {
		"_postman_id": "13812159-262e-46fe-b09d-53802a8c0328",
		"name": "HW_2_AM",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "first_string",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code 200 -№2\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Check that the correct string is received in body -№3\r",
							"pm.test(\"Body is correct\",function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\")\r",
							"}\r",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://162.55.220.72:5007/first"
			},
			"response": []
		},
		{
			"name": "second_name_age_salary",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Status code 200 -№2\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							"//Parse response body to json-№3\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"\r",
							" // Check that the name in the response is equal to name s request (type the name manually.) -№4\r",
							"pm.test(\"check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Anastasiia\");\r",
							"});\r",
							"\r",
							"// Check that age in the response is equal to age s request (type age manually.) -№5\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"32\");\r",
							"});\r",
							"\r",
							"// Check that salary in the response is equal to salary from request (type salary manually.) -№6\r",
							"pm.test(\"check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"// Parse request -№7\r",
							"let req = request.data\r",
							"\r",
							"//Check that the name in the response is equal to name from request (name take from request) -№8\r",
							"pm.test(\"check name from request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(request.data.name);\r",
							"});\r",
							"\r",
							"// Check that age in the response is equal to age from request (age take from request) -№9\r",
							"pm.test(\"check age from request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(request.data.age);\r",
							"});\r",
							"\r",
							"// Check that salary in the response is equal to salary from request (salary take from request.) . -№10\r",
							"let salary_check_1 = jsonData.salary;\r",
							"let salary_1 = Number(req.salary)\r",
							"pm.test(\"check salary\", function () {\r",
							"    pm.expect(salary_1).to.eql(salary_check_1);\r",
							"});\r",
							"\r",
							"//Print family parameter from response to console. -№11\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//Check if u_salary_1_5_year in response is equal to salary*4(salary take from request.) -№12\r",
							"let salary_check_4 = jsonData.salary * 4;\r",
							"let salary_4 = jsonData.family.u_salary_1_5_year\r",
							"pm.test(\"check salary *4\", function () {\r",
							"    pm.expect(salary_4).to.eql(salary_check_4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anastasiia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": "http://162.55.220.72:5007/user_info_3"
			},
			"response": []
		},
		{
			"name": "fifth_salary_person",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Status code 200 -№5\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							"//Parse response body to json -№6\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Parse request -№7\r",
							"let req = request.data\r",
							"\r",
							"//Check json response has start_qa_salary parameter -№8\r",
							"pm.test(\"Json response has start_qa_salary parameter\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//Check json response has qa_salary_after_6_months parameter -№9\r",
							"pm.test(\"Json response has qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//Check json response has qa_salary_after_12_months parameter -№10\r",
							"pm.test(\"Json response has qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//Check json response has qa_salary_after_1.5_year parameter -№11\r",
							"pm.test(\"Json response has qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//Check json response has qa_salary_after_3.5_years parameter -№12\r",
							"pm.test(\"Json response has qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//Check json response has person parameter -№13\r",
							"pm.test(\"Json response has person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// Check that start_qa_salary in the response is equal to salary from request (salary take from request.) -№14\r",
							"let salary_check_1 = jsonData.start_qa_salary;\r",
							"let salary_1 = Number(req.salary)\r",
							"pm.test(\"check start_qa_salary = salary from request\", function () {\r",
							"    pm.expect(salary_1).to.eql(salary_check_1);\r",
							"});\r",
							"\r",
							"// Check that start_qa_salary_after_6_months in the response is equal to salary*2 from request (salary take from request.) -№15\r",
							"let salary_check_6m = jsonData.qa_salary_after_6_months;\r",
							"let salary_6m = Number(req.salary *2)\r",
							"pm.test(\"check start_qa_salary_after_6_months = salary from request *2\", function () {\r",
							"    pm.expect(salary_6m).to.eql(salary_check_6m);\r",
							"});\r",
							"\r",
							"// Check that start_qa_salary_after_12_months in the response is equal to salary*2 from request (salary take from request.) -№16\r",
							"let salary_check_12m = jsonData.qa_salary_after_12_months;\r",
							"let salary_12m = Number(req.salary *2.7)\r",
							"pm.test(\"check start_qa_salary_after_12_months = salary from request * 2.7\", function () {\r",
							"    pm.expect(salary_12m).to.eql(salary_check_12m);\r",
							"});\r",
							"\r",
							"// Check that start_qa_salary_after_1.5_year in the response is equal to salary*3.3 from request (salary take from request.) -№17\r",
							"let salary_check_1_5 = jsonData['qa_salary_after_1.5_year'];\r",
							"let salary_1_5 = Number(req.salary *3.3)\r",
							"pm.test(\"check qa_salary_after_1.5_year = salary from request * 3.3\", function () {\r",
							"    pm.expect(salary_1_5).to.eql(salary_check_1_5);\r",
							"});\r",
							"\r",
							"// Check that start_qa_salary_after_3.5_years in the response is equal to salary*3.8 from request (salary take from request.) -№18\r",
							"let salary_check_3_5y = jsonData['qa_salary_after_3.5_years'];\r",
							"let salary_3_5y = Number(req.salary *3.8)\r",
							"pm.test(\"check qa_salary_after_3.5_years = salary from request *3.8\", function () {\r",
							"    pm.expect(salary_3_5y).to.eql(salary_check_3_5y);\r",
							"});\r",
							"\r",
							"//Check that parameter person , the 1st element from u_name is equal to salary from request (pick salary from request.) -№19\r",
							"let per_u_n = Number(req.salary)\r",
							"pm.test(\"check person , the 1st element from u_name = salary from request\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(per_u_n);\r",
							"});\r",
							"\r",
							"//Check that parameter u_age is equal to age from request (pick age from request.) -№20\r",
							"let req_age = Number(req.age)\r",
							"pm.test(\"check u_age = age from request\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// Check that u_salary_5_years is equal to salary*4.2 from request (salary take from request.) -№21\r",
							"let salary_check_5y = jsonData.person.u_salary_5_years;\r",
							"let salary_5y = Number(req.salary *4.2)\r",
							"pm.test(\"check u_salary_5_years = salary from request * 4.2\", function () {\r",
							"    pm.expect(salary_5y).to.eql(salary_check_5y);\r",
							"});\r",
							"\r",
							"//Write a сycle that prints to the console elements from the person parameter -№22\r",
							"const person = pm.response.json().person\r",
							"for(const key in person) {\r",
							"console.log(`${key} : ${person[key]}`)}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": "http://162.55.220.72:5007/user_info_2"
			},
			"response": []
		},
		{
			"name": "third_dog_name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Status code 200 -№2\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Parse response body to json -№3\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Parse request -№4\r",
							"let req = request.data\r",
							"\r",
							"//Check that the name in the response is equal to name from request (name take from request) -№5\r",
							"pm.test(\"check name from request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(request.data.name);\r",
							"});\r",
							"\r",
							"// Check that age in the response is equal to age from request (age take from request) -№6\r",
							"pm.test(\"check age from request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(request.data.age);\r",
							"});\r",
							"\r",
							"// Check that salary in the response is equal to salary from request (salary take from request.) -№7\r",
							"let salary_check_1 = jsonData.salary;\r",
							"let salary_1 = Number(req.salary)\r",
							"pm.test(\"check salary\", function () {\r",
							"    pm.expect(salary_1).to.eql(salary_check_1);\r",
							"});\r",
							"\r",
							"//Print family parameter from response to console. -№8\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//Check that the dog parameter has name parameter. -№9\r",
							"pm.test(\"check dog parameter has name parameter\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//Check that the dog parameter has age parameter. -№10\r",
							"pm.test(\"check dog parameter has age parameter\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//Check if name parameter is Luky. -№11\r",
							"pm.test(\"check if its Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.have.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//Check if age parameter is 4. -№12\r",
							"pm.test(\"check if its 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.have.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anastasiia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Anastasiia&age=32&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anastasiia"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "fourth_salary",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Status code 200 -№2\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							"//Parse response body to json -№3\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Parse request -№4\r",
							"let req = request.data\r",
							"\r",
							"//Check that the name in the response is equal to name s request (name take from request) -№5\r",
							"pm.test(\"check name from request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(request.data.name);\r",
							"});\r",
							"\r",
							"// Check that age in the response is equal to age s request (age take from request) -№6\r",
							"let age_check_1 = jsonData.age;\r",
							"let age_1 = Number(req.age)\r",
							"pm.test(\"check age from request\", function () {\r",
							"    pm.expect(age_check_1).to.eql(age_1);\r",
							"});\r",
							"\r",
							"//Print salary parameter from request to console.-№7\r",
							"console.log(req.salary)\r",
							"\r",
							"//Print salary parameter from response to console. -№8\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"//Print to the console the 0th element of the salary parameter from response. -№9\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"//Print to the console the 1th element of the salary parameter from response. -№10\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"//Print to the console the 2 element of the salary parameter from response. -№11\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"//Check that the 0th element of the salary parameter is equal to the salary from the request (take the salary from the request.) -№12\r",
							"pm.test(\"check salary[0] = salary from request\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.deep.equal(Number(request.data.salary));\r",
							"});\r",
							"\r",
							"//Check that the 1th element of the salary parameter is equal to the salary*2 from the request (take the salary from the request.) -№13\r",
							"pm.test(\"check salary[1] = salary * 2 from request\", function () {\r",
							"    pm.expect(jsonData.salary[1]).to.eql(String(2*request.data.salary));\r",
							"});\r",
							"\r",
							"//Check that the 2 element of the salary parameter is equal to the salary*3 from the request (take the salary from the request.) -№14\r",
							"pm.test(\"check salary[2] = salary * 3 from request\", function () {\r",
							"    pm.expect(jsonData.salary[2]).to.eql(String(3*request.data.salary));\r",
							"});\r",
							"\r",
							"//Creat in the environment variable \"name\" -№15\r",
							"pm.environment.set(\"name\")\r",
							"\r",
							"//Creat in the environment variable \"age\" -№16\r",
							"pm.environment.set(\"age\")\r",
							"\r",
							"//Creat in the environment variable \"salary\" -№17\r",
							"pm.environment.set(\"salary\")\r",
							"\r",
							"//Pass variable \"name\" to environment -№18\r",
							"pm.environment.set(\"name\",request.data.name)\r",
							"\r",
							"//Pass variable \"age\" to environment -№19\r",
							"pm.environment.set(\"age\",request.data.age)\r",
							"\r",
							"//Pass variable \"salary\" to environment -№20\r",
							"pm.environment.set(\"salary\",request.data.salary)\r",
							"\r",
							"//Write a сycle that prints to the console elements from the salary parameter -№21\r",
							"//let salarArr = jsonData.salary\r",
							"//console.log(salarArr)\r",
							"//for (let i = 0 ; i < salarArr.length ; i++ ) {\r",
							"//console.log(salarArr[i])}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anastasiia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_4?name=Anastasiia&age=32&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Anastasiia"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		}
	]
}