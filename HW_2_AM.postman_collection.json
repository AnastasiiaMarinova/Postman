{
	"info": {
		"_postman_id": "13812159-262e-46fe-b09d-53802a8c0328",
		"name": "HW_2_AM",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "first_string",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Check that the correct string is received in body\r",
							"pm.test(\"Body is correct\",function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\")\r",
							"}\r",
							")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://162.55.220.72:5005/first"
			},
			"response": []
		},
		{
			"name": "second_name_age_salary",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							"//Parse response body to json\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"\r",
							" // Check that the name in the response is equal to name s request (type the name manually.)\r",
							"pm.test(\"check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Anastasiia\");\r",
							"});\r",
							"\r",
							"// Check that age in the response is equal to age s request (type age manually.)\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"32\");\r",
							"});\r",
							"\r",
							"// Check that salary in the response is equal to salary s request (type salary manually.)\r",
							"pm.test(\"check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"// Parse request\r",
							"let req = request.data\r",
							"\r",
							"//Check that the name in the response is equal to name s request (name take from request)\r",
							"pm.test(\"check name from request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(request.data.name);\r",
							"});\r",
							"\r",
							"// Check that age in the response is equal to age s request (age take from request)\r",
							"pm.test(\"check age from request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(request.data.age);\r",
							"});\r",
							"\r",
							"// Check that salary in the response is equal to salary s request (salary take from request.)\r",
							"let salary_check_1 = jsonData.salary;\r",
							"let salary_1 = Number(req.salary)\r",
							"pm.test(\"check salary\", function () {\r",
							"    pm.expect(salary_1).to.eql(salary_check_1);\r",
							"});\r",
							"\r",
							"//Print family parameter from response to console.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//Check if u_salary_1_5_year in response is equal to salary*4(salary take from request.)\r",
							"let salary_check_4 = jsonData.salary * 4;\r",
							"let salary_4 = jsonData.family.u_salary_1_5_year\r",
							"pm.test(\"check salary *4\", function () {\r",
							"    pm.expect(salary_4).to.eql(salary_check_4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anastasiia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": "http://162.55.220.72:5005/user_info_3"
			},
			"response": []
		},
		{
			"name": "third_dog_name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							"//Parse response body to json\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Parse request\r",
							"let req = request.data\r",
							"\r",
							"//Check that the name in the response is equal to name s request (name take from request)\r",
							"pm.test(\"check name from request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(request.data.name);\r",
							"});\r",
							"\r",
							"// Check that age in the response is equal to age s request (age take from request)\r",
							"pm.test(\"check age from request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(request.data.age);\r",
							"});\r",
							"\r",
							"// Check that salary in the response is equal to salary s request (salary take from request.)\r",
							"let salary_check_1 = jsonData.salary;\r",
							"let salary_1 = Number(req.salary)\r",
							"pm.test(\"check salary\", function () {\r",
							"    pm.expect(salary_1).to.eql(salary_check_1);\r",
							"});\r",
							"\r",
							"//Print family parameter from response to console.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//Check that the dog parameter has name parameter.\r",
							"pm.test(\"check dog parameter has name parameter\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//Check that the dog parameter has age parameter.\r",
							"pm.test(\"check dog parameter has age parameter\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//Check if name parameter is Luky.\r",
							"pm.test(\"check if its Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.have.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//Check if age parameter is 4.\r",
							"pm.test(\"check if its 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.have.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anastasiia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Anastasiia&age=32&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anastasiia"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		}
	]
}